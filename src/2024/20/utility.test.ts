import { describe, expect, it } from 'vitest';
import { Readable } from 'stream';
import { ReadStream } from 'fs';

import { parseInputFile } from './utility';

describe('parseInputFile', () => {
  it('should return correct result for the input #1', async () => {
    const fileStream = Readable.from(
      [
        '###############',
        '#...#...#.....#',
        '#.#.#.#.#.###.#',
        '#S#...#.#.#...#',
        '#######.#.#.###',
        '#######.#.#...#',
        '#######.#.###.#',
        '###..E#...#...#',
        '###.#######.###',
        '#...###...#...#',
        '#.#####.#.###.#',
        '#.#...#.#.#...#',
        '#.#.#.#.#.#.###',
        '#...#...#...###',
        '###############'
      ].join('\n')
    ) as ReadStream;

    const { map, start, end } = await parseInputFile(fileStream);
    expect(map).toEqual([
      ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
      ['#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '#', '#', '.', '#'],
      ['#', 'S', '#', '.', '.', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#'],
      ['#', '#', '#', '#', '#', '#', '#', '.', '#', '.', '#', '.', '#', '#', '#'],
      ['#', '#', '#', '#', '#', '#', '#', '.', '#', '.', '#', '.', '.', '.', '#'],
      ['#', '#', '#', '#', '#', '#', '#', '.', '#', '.', '#', '#', '#', '.', '#'],
      ['#', '#', '#', '.', '.', 'E', '#', '.', '.', '.', '#', '.', '.', '.', '#'],
      ['#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#'],
      ['#', '.', '.', '.', '#', '#', '#', '.', '.', '.', '#', '.', '.', '.', '#'],
      ['#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#', '#', '#', '.', '#'],
      ['#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#'],
      ['#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '#', '#'],
      ['#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '#', '#', '#'],
      ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
    ]);
    expect(start).toEqual([3, 1]);
    expect(end).toEqual([7, 5]);
  });
});
