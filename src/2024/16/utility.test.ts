import { beforeAll, describe, expect, it } from 'vitest';
import { Readable } from 'stream';
import { ReadStream } from 'fs';

import type { PuzzleData } from './types';
import { parseInputFile } from './utility';

describe('parseInputFile', () => {
  let result: PuzzleData;

  describe('Input #1', () => {
    beforeAll(async () => {
      result = await parseInputFile(
        Readable.from(
          [
            '###############',
            '#.......#....E#',
            '#.#.###.#.###.#',
            '#.....#.#...#.#',
            '#.###.#####.#.#',
            '#.#.#.......#.#',
            '#.#.#####.###.#',
            '#...........#.#',
            '###.#.#####.#.#',
            '#...#.....#.#.#',
            '#.#.#.###.#.#.#',
            '#.....#...#.#.#',
            '#.###.#.#.#.#.#',
            '#S..#.....#...#',
            '###############'
          ].join('\n')
        ) as ReadStream
      );
    });

    it('should return the correct starting point', () => expect(result.start).toEqual([13, 1]));
    it('should return the correct ending point', () => expect(result.end).toEqual([1, 13]));
    it('should return the correct mapped area', () =>
      expect(result.map).toEqual([
        ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', 'E', '#'],
        ['#', '.', '#', '.', '#', '#', '#', '.', '#', '.', '#', '#', '#', '.', '#'],
        ['#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#'],
        ['#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#'],
        ['#', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#'],
        ['#', '.', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#'],
        ['#', '#', '#', '.', '#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#'],
        ['#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '#'],
        ['#', '.', '#', '.', '#', '.', '#', '#', '#', '.', '#', '.', '#', '.', '#'],
        ['#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#', '.', '#'],
        ['#', '.', '#', '#', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#'],
        ['#', 'S', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#'],
        ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
      ]));

    it('should return the reduced list of graph nodes', () => {
      expect(result.graph.nodes.size).toEqual(36);
      expect(result.graph.nodes).toEqual(
        new Map([
          ['1,1', [1, 1]],
          ['1,3', [1, 3]],
          ['1,7', [1, 7]],
          ['1,9', [1, 9]],
          ['1,13', [1, 13]],
          ['3,1', [3, 1]],
          ['3,3', [3, 3]],
          ['3,5', [3, 5]],
          ['3,7', [3, 7]],
          ['3,9', [3, 9]],
          ['3,11', [3, 11]],
          ['5,3', [5, 3]],
          ['5,5', [5, 5]],
          ['5,9', [5, 9]],
          ['5,11', [5, 11]],
          ['7,1', [7, 1]],
          ['7,3', [7, 3]],
          ['7,5', [7, 5]],
          ['7,9', [7, 9]],
          ['7,11', [7, 11]],
          ['9,1', [9, 1]],
          ['9,3', [9, 3]],
          ['9,5', [9, 5]],
          ['9,9', [9, 9]],
          ['11,1', [11, 1]],
          ['11,3', [11, 3]],
          ['11,5', [11, 5]],
          ['11,7', [11, 7]],
          ['11,9', [11, 9]],
          ['13,1', [13, 1]],
          ['13,3', [13, 3]],
          ['13,5', [13, 5]],
          ['13,7', [13, 7]],
          ['13,9', [13, 9]],
          ['13,11', [13, 11]],
          ['13,13', [13, 13]]
        ])
      );
    });
    it('should return the reduced list of graph edges', () => {
      expect(result.graph.edges.length).toEqual(42);
      expect(result.graph.edges).toEqual([
        [[1, 1], [1, 3], 2],
        [[1, 3], [1, 7], 4],
        [[1, 9], [1, 13], 4],
        [[1, 1], [3, 1], 2],
        [[1, 3], [3, 3], 2],
        [[1, 7], [3, 7], 2],
        [[1, 9], [3, 9], 2],
        [[1, 13], [13, 13], 12],
        [[3, 1], [3, 3], 2],
        [[3, 3], [3, 5], 2],
        [[3, 9], [3, 11], 2],
        [[3, 1], [7, 1], 4],
        [[3, 5], [5, 5], 2],
        [[3, 11], [5, 11], 2],
        [[5, 5], [5, 9], 4],
        [[5, 9], [5, 11], 2],
        [[5, 3], [7, 3], 2],
        [[5, 9], [7, 9], 2],
        [[7, 1], [7, 3], 2],
        [[7, 3], [7, 5], 2],
        [[7, 5], [7, 9], 4],
        [[7, 9], [7, 11], 2],
        [[7, 3], [9, 3], 2],
        [[7, 5], [9, 5], 2],
        [[7, 11], [13, 11], 6],
        [[9, 1], [9, 3], 2],
        [[9, 5], [9, 9], 4],
        [[9, 1], [11, 1], 2],
        [[9, 3], [11, 3], 2],
        [[9, 5], [11, 5], 2],
        [[9, 9], [11, 9], 2],
        [[11, 1], [11, 3], 2],
        [[11, 3], [11, 5], 2],
        [[11, 7], [11, 9], 2],
        [[11, 1], [13, 1], 2],
        [[11, 5], [13, 5], 2],
        [[11, 7], [13, 7], 2],
        [[11, 9], [13, 9], 2],
        [[13, 1], [13, 3], 2],
        [[13, 5], [13, 7], 2],
        [[13, 7], [13, 9], 2],
        [[13, 11], [13, 13], 2]
      ]);
    });
  });
});
